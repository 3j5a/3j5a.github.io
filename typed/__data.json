{"codeBlocks":{"java":[{"fileName":"HeadsOrTails.java","code":"package typed;\n\nimport typed.HeadsOrTails.Toss.Tails;\n\nimport static java.lang.System.out;\nimport static typed.HeadsOrTails.Toss.*;\n\npublic class HeadsOrTails {\n\n    sealed interface Toss {\n        record Heads() implements Toss {};\n        record Tails() implements Toss {};\n    }\n\n    public static void main(String[] args) {\n        var toss = Math.random() >= 0.5 ? new Tails() : new Heads();\n        out.println(\n                switch (toss) {\n                    case Heads() -> \"heads\";\n                    case Tails() -> \"tails\";\n                }\n        );\n    }\n}\n"},{"fileName":"HeadsOrTails.output","code":""},{"fileName":"HeadsOrTails.shell","code":" java --enable-preview --source 19 HeadsOrTails.java"},{"fileName":"JavaVersion.output","code":"openjdk version \"19-ea\" 2022-09-20\nOpenJDK Runtime Environment (build 19-ea+31-2203)\nOpenJDK 64-Bit Server VM (build 19-ea+31-2203, mixed mode, sharing)"},{"fileName":"JavaVersion.shell","code":"java -version"},{"fileName":"Var.java","code":"package typed;\n\npublic class Var {\n\n    public static void main(String[] args) {\n        var var = new Object() { int x; }; //var isn't a keyword\n        var.x = 10;\n\n        var hi = new Object() { public String toString() { return \"¬°Hola!\"; }};\n\n        /*\n         by all means use a properly named\n         local record class if you need stuff like this\n        */\n\n        System.out.println(hi);\n        System.out.println(hi.getClass());\n        System.out.println(var.getClass());\n    }\n\n}\n"},{"fileName":"Var.output","code":"¬°Hola!\nclass typed.Var$2\nclass typed.Var$1"}],"javascript":[{"fileName":"floating-point-wtf.js","code":"0.017 + 0.001"},{"fileName":"floating-point-wtf.replout","code":"0.018000000000000002"},{"fileName":"hello-NaN.js","code":"\"hello \" + + \"world\""},{"fileName":"hello-NaN.replout","code":"'hello NaN'"},{"fileName":"hungry-monkey.js","code":"let mangoes = [Math.PI]\nmangoes[3] = \"ü•≠\";\nconsole.log(`${mangoes.length}`);\nmangoes[-1] = \"üêç\";\nmangoes[Infinity] = \"ü•≠\";\nmangoes.forEach((mango, index) => {\n    console.log(`üêí eating ${mango} at ${index}`);\n});\n"},{"fileName":"magic-nines.js","code":"9_999_999_999_999_999"},{"fileName":"magic-nines.replout","code":"10000000000000000"},{"fileName":"mango-infinity.js","code":"function* mangoInfinityGenerator() {\n    for(let i = 0; i < Infinity; i++) {\n        yield \"ü•≠\";\n    }\n}\nlet mangoInfinity = mangoInfinityGenerator();\nlet nextMango;\nwhile(nextMango = mangoInfinity.next().value) {\n    console.log(`üêí eating ${nextMango}`)\n}\n"},{"fileName":"power-of-false.js","code":"Math.pow(10, false)"},{"fileName":"power-of-false.replout","code":"1"},{"fileName":"true-plus-true.js","code":"true + true"},{"fileName":"true-plus-true.replout","code":"2"}],"julia":[{"fileName":"casually-untyped.jl","code":"function halve(x)\n    x/2\nend"},{"fileName":"casually-untyped.replout","code":"halve(1)\n0.5\n"},{"fileName":"explicitly-typed.jl","code":"function halve(x)::Rational\n    x/2\nend"},{"fileName":"explicitly-typed.replout","code":"halve(1)\n1//2\n"},{"fileName":"primitive-type-example.jl","code":"primitive type Bool <: Integer 8 end"},{"fileName":"primitive-type.syntax","code":"primitive type ¬´name¬ª ¬´bits¬ª end\nprimitive type ¬´name¬ª <: ¬´supertype¬ª ¬´bits¬ª end"}]}}